{
    "openrpc": "1.2.4",
    "info": {
        "title": "StarkEx NFT Application API",
        "description": "A specification of a standard interface for NFT applications using StarkEx",
        "version": "0.1.0"
    },
    "methods": [
        {
            "name": "starkex_getUserAssets",
            "description": "Retrieve a user's known assets",
            "params": [
                {
                    "name": "stark_key",
                    "description": "The stark key identifying the user",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/NUM_AS_HEX"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "type": "object",
                    "properties": {
                        "assets": {
                            "description": "The assets for this user",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ERC721_ASSET_INFO"
                            }
                        },
                        "proof": {
                            "description": "The proof of ownership (a merkle path to the state root)",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/MERKLE_PATH"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "starkex_getAllAssets",
            "description": "Retrieve all assets that adhere to the given filter",
            "params": [
                {
                    "name": "filter",
                    "description": "The filter used to choose the assets to return",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KEYWORD"
                        }
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "asset_id": {
                                "$ref": "#/components/schemas/ERC721_ASSET_ID"
                            },
                            "asset_info": {
                                "$ref": "#/components/schemas/ERC721_ASSET_INFO"
                            },
                            "proof": {
                                "$ref": "#/components/schemas/MERKLE_PATH"
                            }
                        }
                    }
                }
            }
        }
    ],
    "components": {
        "schemas": {
            "NUM_AS_HEX": {
                "description": "An integer number in hex format (0x...)",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]+$"
            },
            "ERC721_ASSET_INFO": {
                "description": "The asset info calculated for a given asset",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{72}$"
            },
            "ERC721_ASSET_ID": {
                "description": "The asset id of for an NFT (ERC721) asset. 32 bytes with 5 MSB zeroed",
                "type": "string",
                "pattern": "^0x0[0-7]{1}[a-fA-F0-9]{62}$"
            },
            "MERKLE_PATH": {
                "description": "A series of bytes denoting a path in a merkle tree. Bytes given as pairs of hex digits",
                "type": "string",
                "pattern": "^0x([a-fA-F0-9]{2})+$"
            },
            "KEYWORD": {
                "description": "A label, alphanumeric English + underscore, with no spaces",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_]+$"
            }
        }
    }
}
