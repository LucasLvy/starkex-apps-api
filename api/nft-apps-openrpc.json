{
    "openrpc": "1.2.4",
    "info": {
        "title": "StarkEx NFT Application API",
        "description": "A specification of a standard interface for NFT applications using StarkEx",
        "version": "0.1.0"
    },
    "methods": [
        {
            "name": "starkex_getUserAssets",
            "description": "Retrieve a user's known assets",
            "params": [
                {
                    "name": "stark_key",
                    "description": "The stark key identifying the user",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/STARK_KEY"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "type": "object",
                    "properties": {
                        "assets": {
                            "description": "The assets for this user",
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/NFT_ASSET"
                            }
                        }
                    }
                }
            }
        },
        {
            "name": "starkex_getAsset",
            "description": "Given an asset id retrieve all the asset information",
            "params": [
                {
                    "name": "asset_id",
                    "description": "The asset's id",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/ASSET_ID"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "$ref": "#/components/schemas/NFT_ASSET"
                }
            },
            "errors": [
                {
                    "$ref": "#/components/errors/ASSET_NOT_FOUND"
                }
            ]
        },
        {
            "name": "starkex_getAssetsByFilter",
            "description": "Retrieve all assets that adhere to the given filter",
            "params": [
                {
                    "name": "filter",
                    "description": "The filter used to choose the assets to return",
                    "required": true,
                    "schema": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KEYWORD"
                        }
                    }
                },
                {
                    "name": "page_request",
                    "description": "The information required to return a specific page of results",
                    "required": true,
                    "schema": {
                        "$ref": "#/components/schemas/RESULT_PAGE_REQUEST"
                    }
                }
            ],
            "result": {
                "name": "result",
                "schema": {
                    "type": "object",
                    "properties": {
                        "assets": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/NFT_ASSET"
                            }
                        },
                        "page_response": {
                            "description": "A pointer to the last element of the delivered page, can be used to sent with subsequent queries to more pages",
                            "type": "string"
                        }
                    }
                }
            }
        }
    ],
    "components": {
        "schemas": {
            "RESULT_PAGE_REQUEST": {
                "type": "object",
                "properties": {
                    "continuation_token": {
                        "description": "a pointer to the last element of the delivered page, use this token in a subsequent query to obtain the next page",
                        "type": "string"
                    },
                    "chunk_size": {
                        "type": "integer",
                        "minimum": 1
                    }
                },
                "required": [
                    "chunk_size"
                ]
            },
            "NFT_ASSET": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "The name of the NFT",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description of the NFT",
                        "type": "string"
                    },
                    "owner_key": {
                        "description": "The stark key of the owner of the NFT",
                        "$ref": "#/components/schemas/STARK_KEY"
                    },
                    "contract_address": {
                        "description": "Address of the NFT contract on L1",
                        "$ref": "#/components/schemas/ETH_ADDRESS"
                    },
                    "collection_id": {
                        "description": "The id of the collection this NFT belongs to",
                        "$ref": "#/components/schemas/COLLECTION_ID"
                    },
                    "asset_id": {
                        "$ref": "#/components/schemas/ASSET_ID"
                    },
                    "asset_info": {
                        "$ref": "#/components/schemas/ASSET_INFO"
                    },
                    "content": {
                        "description": "The content of the NFT (or link to it)",
                        "type": "string"
                    },
                    "proof": {
                        "$ref": "#/components/schemas/MERKLE_PATH"
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/METDATA_DICT"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/KEYWORD"
                        }
                    }
                }
            },
            "METADATA_DICT": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string"
                        },
                        "value": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "TEXT",
                                "DISCRETE",
                                "ENUM"
                            ]
                        }
                    }
                }
            },
            "STARK_KEY": {
                "$ref": "#/components/schemas/NUM_AS_HEX"
            },
            "NUM_AS_HEX": {
                "description": "An integer number in hex format (0x...)",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]+$"
            },
            "ETH_ADDRESS": {
                "type": "string",
                "$comment": "An ethereum address",
                "description": "an ethereum address represented as 40 hex digits",
                "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "ASSET_INFO": {
                "description": "The asset info calculated for a given asset",
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{72}$"
            },
            "ASSET_ID": {
                "description": "The asset id of for an NFT (ERC721) asset. 32 bytes with 5 MSB zeroed",
                "type": "string",
                "pattern": "^0x0[0-7]{1}[a-fA-F0-9]{62}$"
            },
            "MERKLE_PATH": {
                "description": "A series of bytes denoting a path in a merkle tree. Bytes given as pairs of hex digits",
                "type": "string",
                "pattern": "^0x([a-fA-F0-9]{2})+$"
            },
            "KEYWORD": {
                "description": "A label, alphanumeric English + underscore, with no spaces",
                "type": "string",
                "pattern": "^[a-zA-Z0-9_]+$"
            },
            "COLLECTION_ID": {
                "type": "number",
                "minimum": 0
            }
        },
        "errors": {
            "ASSET_NOT_FOUND": {
                "code": 1,
                "message": "Requested asset was not found"
            }
        }
    }
}
